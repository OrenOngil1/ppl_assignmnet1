#lang racket/base

; Signature: last-item(lst)
; Type:[List(T) -> T]
; Purpose: Retrieving the last item of lst
; Pre-conditions: lst.length > 0
; Tests: last-item('(1, 2, 3)) -> 3, last-item ('(1)) -> 1
(define last-item
    (lambda (lst)
        (if(eq? (cdr lst) '())
            (car lst)
            (last-item (cdr lst))
        )
    )
)

; Signature: remove-last-item(lst)
; Type: [List(T) -> List(T)]
; Purpose: Removes the last item in lst
; Pre-conditions: lst.length > 0
; Tests: remove-last-item('(1, 2, 3)) -> '(1, 2), remove-last-item('(1)) -> '()
(define remove-last-item
    (lambda (lst)
        (if(eq? (cdr lst) '())
            '()
            (cons (car lst) remove-last-item(cdr lst))
        )
    )
)

; Signature: rotate-nth(lst, n)
; Type: [List(T) * number -> List(T)]
; Purpose: Rotates the list n times to the right
; Pre-conditions: n is a non-negative number
; Tests: rotate-nth('(1, 2, 3)) -> '(3, 1, 2),rotate-nth('(1, 2, 3), 2) -> '(2, 3, 1), rotate-nth('(1, 2, 3), 3) -> '(1, 2, 3) rotate-nth('(), 1) -> '()
(define rotate-nth
    (lambda (lst n)
        (if(eq? lst '())
            '()
            (if(= n 0)
                lst
                rotate-nth((cons (last-item lst) ((remove-last-item (lst)) (- n 1))))
            )
        )
    )
)
